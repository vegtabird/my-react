(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-runtime"] = {}));
})(this, (function (exports) { 'use strict';

	const IS_SUPPORT_SYMBOL = typeof Symbol === 'function' && !!Symbol.for;
	//react type 使用symbol为了确保唯一性
	const REACT_ELEMENT_TYPE = IS_SUPPORT_SYMBOL
	    ? Symbol.for('react.element')
	    : 0xeac7;

	//React element constructor function to create element
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props: props,
	        __mark: 'myReact'
	    };
	    return element;
	};
	const jsx = (type, config, ...children) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const value = config[prop];
	        if (prop === 'key') {
	            if (value !== undefined) {
	                key = '' + value;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (value !== undefined) {
	                ref = value;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = value;
	        }
	    }
	    const childrenLength = children.length;
	    if (childrenLength) {
	        props.children = childrenLength === 1 ? children[0] : children;
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = (type, config) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const value = config[prop];
	        if (prop === 'key') {
	            if (value !== undefined) {
	                key = '' + value;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (value !== undefined) {
	                ref = value;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = value;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const isValidElementFn = (Object) => {
	    return (typeof Object === 'object' &&
	        Object !== null &&
	        Object.$$typeof === REACT_ELEMENT_TYPE);
	};

	exports.isValidElementFn = isValidElementFn;
	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
